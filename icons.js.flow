// @flow

const color = require('color');
const fs = require('fs');
const Hugo = require('alfred-hugo');
const path = require('path');

const octicons = require('octicons');
const octiconsPath = path.join(path.dirname(require.resolve('octicons')), 'build', 'svg');

// Svgexport is optional
var svgexport = null;
try {
    svgexport = require('svgexport') || null;
} catch (err) {}

class Icons {
    /**
     * SVG icon path color
     * @return {string}
     */
    _pathColor(): string {
        let iconColor = color('#FFFFFF');

        // Decide color based on text or background color
        if (Hugo.alfredThemeFile) {
            try {
                iconColor = color(Hugo.alfredTheme.result.text.color);
            } catch (e) {}
        } else if (process.env.alfred_theme_background) {
            let bgColor = color(process.env.alfred_theme_background);
            iconColor = bgColor.grayscale().negate();
        }

        return iconColor.rgb().string();
    }

    /**
     * Get list of used icons in projects
     * @param {Array.Object} projects
     * @return {Array.string}
     */
    usedIcons(projects: Array<Object>): Array<string> {
        let icons = [];

        // Octicon names
        const octiconNames = Object.keys(octicons);

        // Output path
        const iconPath = path.join(__dirname, 'icons');

        for (let project of projects) {
            if (!project.hasOwnProperty('icon')) {
                continue;
            }

            let icon = path.parse(project.icon.path);

            if (icon.dir === iconPath && octiconNames.indexOf(icon.name) >= 0) {
                if (icons.indexOf(icon.name) === -1) {
                    icons.push(icon.name);
                }
            }
        }

        return icons;
    }

    /**
     * Check icon building dependencies
     * @return {boolean}
     */
    checkDependencies(): boolean {
        try {
            require.resolve('svgexport');
        } catch (err) {
            return false;
        }

        return true;
    }

    /**
     * Rebuild icon(s)
     * @param {Array.Object} projects
     * @param {Object} options
     * @return {Promise}
     * @async
     */
    async rebuild(projects: Array<Object>, options: Object = {}) {
        if (!svgexport) {
            return false;
        }

        // Output path
        const iconPath = path.join(__dirname, 'icons');

        // Icon size
        let iconSize = 64;

        // Render queue
        let renderQueue = [];

        // Get used icons from projects list
        let icons = this.usedIcons(projects);

        // Filter icons
        if (options && options.onlyMissing === true) {
            icons = icons.filter(icon => {
                try {
                    fs.statSync(path.join(iconPath, icon + '.png'));
                    return false;
                } catch (e) {
                    return true;
                }
            });
        }

        if (icons.length === 0) {
            return;
        }

        // Icon size if set by theme
        if (Hugo.alfredTheme.result && Hugo.alfredTheme.result.iconSize) {
            iconSize = Hugo.alfredTheme.result.iconSize;
        }

        // Render options
        let renderOptions = [iconSize + ':' + iconSize, 'pad', 'path{fill:' + this._pathColor() + '}'];

        // Build render queue
        for (let icon of icons) {
            if (icon && icon.length > 0) {
                renderQueue.push({
                    input: path.join(octiconsPath, icon + '.svg'),
                    output: [
                        [path.join(iconPath, icon + '.png'), ...renderOptions]
                    ]
                });
            }
        }

        // Show notification
        Hugo.notify({
            message: `Rebuilding ${renderQueue.length} project icons, please wait.`
        });

        // Render
        svgexport.render(renderQueue, err => {
            if (err) {
                throw err;
            }
        });
    }
}

module.exports = new Icons();
