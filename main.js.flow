// @flow

const Hugo = require('alfred-hugo');
const CSON = require('cson-parser');
const path = require('path');

const Project = require('./project');
const Icons = require('./icons');

Hugo.action('projects', query => {
    const homedir = process.env.HOME || '';
    const projectsPath: string = path.resolve(homedir, '.atom', 'projects.cson');

    // Projects file
    const projectsFile = Hugo.cacheFile(projectsPath, 'projects');

    // Parse projects
    projectsFile.on('change', (cache, file) => {
        // Read projects file
        let projects = CSON.parse(file) || [];

        // Parse projects
        projects = Project.parseAll(projects);

        // Sort projects
        projects.sort((a, b) => {
            let nameA = a.title.toLowerCase();
            let nameB = b.title.toLowerCase();

            if (nameA < nameB) {
                return -1;
            }

            if (nameA > nameB) {
                return 1;
            }

            return 0;
        });

        cache.store(projects);
    });

    // Add projects to Hugo
    let projects = projectsFile.get();

    if (projects && Array.isArray(projects)) {
        Hugo.addItems(projects);
    }

    // Add option to rebuild project icons
    Hugo.addItem({
        title: 'Rebuild project icons',
        arg: {
            variables: {
                task: 'rebuild-icons'
            }
        }
    });

    // Filter items by query
    Hugo.filterItems(query);

    // Check if any projects found
    if (Hugo.itemCount < 1) {
        Hugo.addItem({
            title: 'No projects found.'
        });
    }

    // Output
    Hugo.feedback();
});

/**
 * Rebuild action
 */
Hugo.action('rebuild-icons', () => {
    const themePath: string = Hugo.alfredMeta.themeFile;
    const lastTheme: ?string = Hugo.cache.get('lastTheme');

    if (!lastTheme) {
        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);
        Icons.rebuild();
        return;
    }

    if (lastTheme !== Hugo.alfredMeta.theme) {
        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);
        Icons.rebuild();
        return;
    }

    if (themePath) {
        const themeFile = Hugo.cacheFile(themePath, 'theme');

        themeFile.on('change', () => {
            Icons.rebuild();
        });

        themeFile.get();
    }
});
