// @flow

const Hugo = require('alfred-hugo');
const CSON = require('cson-parser');
const path = require('path');
const fs = require('fs');

const Project = require('./project');
const Icons = require('./icons');

/**
 * Check for environment changes (workflow version, terminal app, nodejs path)
 * @return {void}
 */
const checkEnvironmentChanges = (): void => {
    let clearCache = false;

    // Terminal app
    if (process.env.terminalApp && Hugo.config.get('terminalApp') !== process.env.terminalApp) {
        clearCache = true;
        Hugo.config.set('terminalApp', process.env.terminalApp);
    }

    // Workflow version
    if (Hugo.workflowMeta.version && Hugo.config.get('wfVersion') !== Hugo.workflowMeta.version) {
        clearCache = true;
        Hugo.config.set('wfVersion', Hugo.workflowMeta.version);
    }

    if (clearCache === true) {
        Hugo.clearCacheSync();
    }
};

/**
 * Check if we need to rebuild icons
 * @param {Array.Object} projects
 * @return {Promise}
 */
const checkIcons = async (projects: Array<Object>): Promise<void> => {
    const themePath: string = Hugo.alfredMeta.themeFile;
    const lastTheme: ?string = Hugo.config.get('lastTheme');

    try {
        fs.statSync(path.join(__dirname, 'icons'));
    } catch (e) {
        Hugo.config.set('lastTheme', Hugo.alfredMeta.theme);
        Icons.rebuild(projects);
        return;
    }

    if (!lastTheme || lastTheme !== Hugo.alfredMeta.theme) {
        Hugo.config.set('lastTheme', Hugo.alfredMeta.theme);
        Icons.rebuild(projects);
        return;
    }

    if (themePath) {
        const themeFile = Hugo.cacheFile(themePath, 'theme');

        themeFile.on('change', () => {
            Icons.rebuild(projects);
        });

        themeFile.get();
    }

    Icons.rebuild(projects, {onlyMissing: true});
};

/**
 * Projects action
 */
Hugo.action('projects', () => {
    // Home dir
    const homedir = process.env.HOME || '';

    // Projects file
    const projectsFile = Hugo.cacheFile(path.resolve(homedir, '.atom', 'projects.cson'), 'projects');

    // Check environment for changes
    checkEnvironmentChanges();

    // Parse projects
    projectsFile.on('change', (cache, file) => {
        // Read projects file
        let projects = CSON.parse(file) || [];

        // Parse projects
        projects = Project.parseAll(projects);

        // Rebuild icons when needed
        Icons.rebuild(projects, {onlyMissing: true});

        // Sort projects
        projects.sort((a, b) => {
            let nameA = a.title.toLowerCase();
            let nameB = b.title.toLowerCase();

            if (nameA < nameB) {
                return -1;
            }

            if (nameA > nameB) {
                return 1;
            }

            return 0;
        });

        cache.store(projects);
    });

    // Add projects to Hugo
    let projects = projectsFile.get();

    if (projects && Array.isArray(projects)) {
        // Check dependencies for icon building
        if (!Icons.checkDependencies() && Icons.usedIcons(projects).length > 0) {
            console.error(`Missing dependencies to render project icons. Please run: cd ${__dirname} && npm install`);

            Hugo.addItem({
                title: 'Missing dependencies',
                subtitle: 'Missing dependencies to render project icons. Please press enter to install.',
                arg: __dirname,
                variables: {
                    task: 'wfDependencies'
                },
                valid: true,
                mods: {
                    alt: {
                        valid: true,
                        subtitle: 'View documentation on this issue.',
                        arg: 'https://github.com/Cloudstek/alfred-hugo/blob/master/README.md'
                    }
                }
            });
        }

        // Add projects to Hugo
        Hugo.addItems(projects);

        // Check icons
        checkIcons(projects);
    }

    // Check if any projects found
    if (Hugo.itemCount === 0) {
        Hugo.addItem({
            title: 'No projects found.'
        });
    }

    // Output
    Hugo.feedback();
});
