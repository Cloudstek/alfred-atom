{"version":3,"sources":["main.js.flow"],"names":["Hugo","require","CSON","path","Project","Icons","action","homedir","process","env","HOME","projectsPath","resolve","projectsFile","cacheFile","on","cache","file","projects","parse","parseAll","sort","a","b","nameA","title","toLowerCase","nameB","store","get","Array","isArray","addItems","addItem","arg","variables","task","filterItems","query","itemCount","feedback","themePath","alfredMeta","themeFile","lastTheme","set","theme","rebuild"],"mappings":"aAEA,GAAMA,MAAOC,QAAQ,aAAR,CAAb,CACA,GAAMC,MAAOD,QAAQ,aAAR,CAAb,CACA,GAAME,MAAOF,QAAQ,MAAR,CAAb,CAEA,GAAMG,SAAUH,QAAQ,WAAR,CAAhB,CACA,GAAMI,OAAQJ,QAAQ,SAAR,CAAd,CAEAD,KAAKM,MAAL,CAAY,UAAZ,CAAwB,eAAS,CAC7B,GAAMC,SAAUC,QAAQC,GAAR,CAAYC,IAAZ,EAAoB,EAApC,CACA,GAAMC,cAAuBR,KAAKS,OAAL,CAAaL,OAAb,CAAsB,OAAtB,CAA+B,eAA/B,CAA7B,CAGA,GAAMM,cAAeb,KAAKc,SAAL,CAAeH,YAAf,CAA6B,UAA7B,CAArB,CAGAE,aAAaE,EAAb,CAAgB,QAAhB,CAA0B,SAACC,KAAD,CAAQC,IAAR,CAAiB,CAEvC,GAAIC,UAAWhB,KAAKiB,KAAL,CAAWF,IAAX,GAAoB,EAAnC,CAGAC,SAAWd,QAAQgB,QAAR,CAAiBF,QAAjB,CAAX,CAGAA,SAASG,IAAT,CAAc,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACpB,GAAIC,OAAQF,EAAEG,KAAF,CAAQC,WAAR,EAAZ,CACA,GAAIC,OAAQJ,EAAEE,KAAF,CAAQC,WAAR,EAAZ,CAEA,GAAIF,MAAQG,KAAZ,CAAmB,CACf,MAAO,CAAC,CAAR,CACH,CAED,GAAIH,MAAQG,KAAZ,CAAmB,CACf,MAAO,EAAP,CACH,CAED,MAAO,EAAP,CACH,CAbD,EAeAX,MAAMY,KAAN,CAAYV,QAAZ,EACH,CAxBD,EA2BA,GAAIA,UAAWL,aAAagB,GAAb,EAAf,CAEA,GAAIX,UAAYY,MAAMC,OAAN,CAAcb,QAAd,CAAhB,CAAyC,CACrClB,KAAKgC,QAAL,CAAcd,QAAd,EACH,CAGDlB,KAAKiC,OAAL,CAAa,CACTR,MAAO,uBADE,CAETS,IAAK,CACDC,UAAW,CACPC,KAAM,eADC,CADV,CAFI,CAAb,EAUApC,KAAKqC,WAAL,CAAiBC,KAAjB,EAGA,GAAItC,KAAKuC,SAAL,CAAiB,CAArB,CAAwB,CACpBvC,KAAKiC,OAAL,CAAa,CACTR,MAAO,oBADE,CAAb,EAGH,CAGDzB,KAAKwC,QAAL,GACH,CA/DD,EAoEAxC,KAAKM,MAAL,CAAY,eAAZ,CAA6B,UAAM,CAC/B,GAAMmC,WAAoBzC,KAAK0C,UAAL,CAAgBC,SAA1C,CACA,GAAMC,WAAqB5C,KAAKgB,KAAL,CAAWa,GAAX,CAAe,WAAf,CAA3B,CAEA,GAAI,CAACe,SAAL,CAAgB,CACZ5C,KAAKgB,KAAL,CAAW6B,GAAX,CAAe,WAAf,CAA4B7C,KAAK0C,UAAL,CAAgBI,KAA5C,EACAzC,MAAM0C,OAAN,GACA,OACH,CAED,GAAIH,YAAc5C,KAAK0C,UAAL,CAAgBI,KAAlC,CAAyC,CACrC9C,KAAKgB,KAAL,CAAW6B,GAAX,CAAe,WAAf,CAA4B7C,KAAK0C,UAAL,CAAgBI,KAA5C,EACAzC,MAAM0C,OAAN,GACA,OACH,CAED,GAAIN,SAAJ,CAAe,CACX,GAAME,WAAY3C,KAAKc,SAAL,CAAe2B,SAAf,CAA0B,OAA1B,CAAlB,CAEAE,UAAU5B,EAAV,CAAa,QAAb,CAAuB,UAAM,CACzBV,MAAM0C,OAAN,GACH,CAFD,EAIAJ,UAAUd,GAAV,GACH,CACJ,CAzBD","file":"main.js","sourcesContent":["// @flow\n\nconst Hugo = require('alfred-hugo');\nconst CSON = require('cson-parser');\nconst path = require('path');\n\nconst Project = require('./project');\nconst Icons = require('./icons');\n\nHugo.action('projects', query => {\n    const homedir = process.env.HOME || '';\n    const projectsPath: string = path.resolve(homedir, '.atom', 'projects.cson');\n\n    // Projects file\n    const projectsFile = Hugo.cacheFile(projectsPath, 'projects');\n\n    // Parse projects\n    projectsFile.on('change', (cache, file) => {\n        // Read projects file\n        let projects = CSON.parse(file) || [];\n\n        // Parse projects\n        projects = Project.parseAll(projects);\n\n        // Sort projects\n        projects.sort((a, b) => {\n            let nameA = a.title.toLowerCase();\n            let nameB = b.title.toLowerCase();\n\n            if (nameA < nameB) {\n                return -1;\n            }\n\n            if (nameA > nameB) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        cache.store(projects);\n    });\n\n    // Add projects to Hugo\n    let projects = projectsFile.get();\n\n    if (projects && Array.isArray(projects)) {\n        Hugo.addItems(projects);\n    }\n\n    // Add option to rebuild project icons\n    Hugo.addItem({\n        title: 'Rebuild project icons',\n        arg: {\n            variables: {\n                task: 'rebuild-icons'\n            }\n        }\n    });\n\n    // Filter items by query\n    Hugo.filterItems(query);\n\n    // Check if any projects found\n    if (Hugo.itemCount < 1) {\n        Hugo.addItem({\n            title: 'No projects found.'\n        });\n    }\n\n    // Output\n    Hugo.feedback();\n});\n\n/**\n * Rebuild action\n */\nHugo.action('rebuild-icons', () => {\n    const themePath: string = Hugo.alfredMeta.themeFile;\n    const lastTheme: ?string = Hugo.cache.get('lastTheme');\n\n    if (!lastTheme) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild();\n        return;\n    }\n\n    if (lastTheme !== Hugo.alfredMeta.theme) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild();\n        return;\n    }\n\n    if (themePath) {\n        const themeFile = Hugo.cacheFile(themePath, 'theme');\n\n        themeFile.on('change', () => {\n            Icons.rebuild();\n        });\n\n        themeFile.get();\n    }\n});\n"]}