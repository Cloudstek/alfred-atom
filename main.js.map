{"version":3,"sources":["main.js.flow"],"names":["Hugo","require","CSON","path","fs","Project","Icons","checkEnvironmentChanges","clearCache","process","env","terminalApp","config","get","set","workflowMeta","version","clearCacheSync","checkIcons","projects","themePath","alfredMeta","themeFile","lastTheme","cache","statSync","join","__dirname","theme","rebuild","cacheFile","on","action","homedir","HOME","projectsFile","resolve","file","parse","parseAll","onlyMissing","sort","a","b","nameA","title","toLowerCase","nameB","store","Array","isArray","checkDependencies","usedIcons","length","console","error","addItem","subtitle","arg","variables","task","valid","mods","alt","addItems","itemCount","feedback"],"mappings":"wVAEA,GAAMA,MAAOC,QAAQ,aAAR,CAAb,CACA,GAAMC,MAAOD,QAAQ,aAAR,CAAb,CACA,GAAME,MAAOF,QAAQ,MAAR,CAAb,CACA,GAAMG,IAAKH,QAAQ,IAAR,CAAX,CAEA,GAAMI,SAAUJ,QAAQ,WAAR,CAAhB,CACA,GAAMK,OAAQL,QAAQ,SAAR,CAAd,CAMA,GAAMM,yBAA0B,QAA1BA,wBAA0B,EAAY,CACxC,GAAIC,YAAa,KAAjB,CAGA,GAAIC,QAAQC,GAAR,CAAYC,WAAZ,EAA2BX,KAAKY,MAAL,CAAYC,GAAZ,CAAgB,aAAhB,IAAmCJ,QAAQC,GAAR,CAAYC,WAA9E,CAA2F,CACvFH,WAAa,IAAb,CACAR,KAAKY,MAAL,CAAYE,GAAZ,CAAgB,aAAhB,CAA+BL,QAAQC,GAAR,CAAYC,WAA3C,EACH,CAGD,GAAIX,KAAKe,YAAL,CAAkBC,OAAlB,EAA6BhB,KAAKY,MAAL,CAAYC,GAAZ,CAAgB,WAAhB,IAAiCb,KAAKe,YAAL,CAAkBC,OAApF,CAA6F,CACzFR,WAAa,IAAb,CACAR,KAAKY,MAAL,CAAYE,GAAZ,CAAgB,WAAhB,CAA6Bd,KAAKe,YAAL,CAAkBC,OAA/C,EACH,CAED,GAAIR,aAAe,IAAnB,CAAyB,CACrBR,KAAKiB,cAAL,GACH,CACJ,CAlBD,CAyBA,GAAMC,0FAAa,iBAAOC,QAAP,sJACTC,SADS,CACWpB,KAAKqB,UAAL,CAAgBC,SAD3B,CAETC,SAFS,CAEYvB,KAAKwB,KAAL,CAAWX,GAAX,CAAe,WAAf,CAFZ,iBAKXT,GAAGqB,QAAH,CAAYtB,KAAKuB,IAAL,CAAUC,SAAV,CAAqB,OAArB,CAAZ,EALW,+EAOX3B,KAAKwB,KAAL,CAAWV,GAAX,CAAe,WAAf,CAA4Bd,KAAKqB,UAAL,CAAgBO,KAA5C,EACAtB,MAAMuB,OAAN,CAAcV,QAAd,EARW,8CAYX,CAACI,SAAD,EAAcA,YAAcvB,KAAKqB,UAAL,CAAgBO,KAZjC,2BAaX5B,KAAKwB,KAAL,CAAWV,GAAX,CAAe,WAAf,CAA4Bd,KAAKqB,UAAL,CAAgBO,KAA5C,EACAtB,MAAMuB,OAAN,CAAcV,QAAd,EAdW,yCAkBf,GAAIC,SAAJ,CAAe,CACLE,SADK,CACOtB,KAAK8B,SAAL,CAAeV,SAAf,CAA0B,OAA1B,CADP,CAGXE,UAAUS,EAAV,CAAa,QAAb,CAAuB,UAAM,CACzBzB,MAAMuB,OAAN,CAAcV,QAAd,EACH,CAFD,EAIAG,UAAUT,GAAV,GACH,CA1Bc,yEAAb,yEAAN,CAgCAb,KAAKgC,MAAL,CAAY,UAAZ,CAAwB,UAAM,CAE1B,GAAMC,SAAUxB,QAAQC,GAAR,CAAYwB,IAAZ,EAAoB,EAApC,CAGA,GAAMC,cAAenC,KAAK8B,SAAL,CAAe3B,KAAKiC,OAAL,CAAaH,OAAb,CAAsB,OAAtB,CAA+B,eAA/B,CAAf,CAAgE,UAAhE,CAArB,CAGA1B,0BAGA4B,aAAaJ,EAAb,CAAgB,QAAhB,CAA0B,SAACP,KAAD,CAAQa,IAAR,CAAiB,CAEvC,GAAIlB,UAAWjB,KAAKoC,KAAL,CAAWD,IAAX,GAAoB,EAAnC,CAGAlB,SAAWd,QAAQkC,QAAR,CAAiBpB,QAAjB,CAAX,CAGAb,MAAMuB,OAAN,CAAcV,QAAd,CAAwB,CAACqB,YAAa,IAAd,CAAxB,EAGArB,SAASsB,IAAT,CAAc,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACpB,GAAIC,OAAQF,EAAEG,KAAF,CAAQC,WAAR,EAAZ,CACA,GAAIC,OAAQJ,EAAEE,KAAF,CAAQC,WAAR,EAAZ,CAEA,GAAIF,MAAQG,KAAZ,CAAmB,CACf,MAAO,CAAC,CAAR,CACH,CAED,GAAIH,MAAQG,KAAZ,CAAmB,CACf,MAAO,EAAP,CACH,CAED,MAAO,EAAP,CACH,CAbD,EAeAvB,MAAMwB,KAAN,CAAY7B,QAAZ,EACH,CA3BD,EA8BA,GAAIA,UAAWgB,aAAatB,GAAb,EAAf,CAEA,GAAIM,UAAY8B,MAAMC,OAAN,CAAc/B,QAAd,CAAhB,CAAyC,CAErC,GAAI,CAACb,MAAM6C,iBAAN,EAAD,EAA8B7C,MAAM8C,SAAN,CAAgBjC,QAAhB,EAA0BkC,MAA1B,CAAmC,CAArE,CAAwE,CACpEC,QAAQC,KAAR,CAAe,gEAA+D5B,SAAU,iBAAxF,EAEA3B,KAAKwD,OAAL,CAAa,CACTX,MAAO,sBADE,CAETY,SAAU,8EAFD,CAGTC,IAAK/B,SAHI,CAITgC,UAAW,CACPC,KAAM,gBADC,CAJF,CAOTC,MAAO,IAPE,CAQTC,KAAM,CACFC,IAAK,CACDF,MAAO,IADN,CAEDJ,SAAU,mCAFT,CAGDC,IAAK,gEAHJ,CADH,CARG,CAAb,EAgBH,CAGD1D,KAAKgE,QAAL,CAAc7C,QAAd,EAGAD,WAAWC,QAAX,EACH,CAGD,GAAInB,KAAKiE,SAAL,GAAmB,CAAvB,CAA0B,CACtBjE,KAAKwD,OAAL,CAAa,CACTX,MAAO,oBADE,CAAb,EAGH,CAGD7C,KAAKkE,QAAL,GACH,CAlFD","file":"main.js","sourcesContent":["// @flow\n\nconst Hugo = require('alfred-hugo');\nconst CSON = require('cson-parser');\nconst path = require('path');\nconst fs = require('fs');\n\nconst Project = require('./project');\nconst Icons = require('./icons');\n\n/**\n * Check for environment changes (workflow version, terminal app, nodejs path)\n * @return {void}\n */\nconst checkEnvironmentChanges = (): void => {\n    let clearCache = false;\n\n    // Terminal app\n    if (process.env.terminalApp && Hugo.config.get('terminalApp') !== process.env.terminalApp) {\n        clearCache = true;\n        Hugo.config.set('terminalApp', process.env.terminalApp);\n    }\n\n    // Workflow version\n    if (Hugo.workflowMeta.version && Hugo.config.get('wfVersion') !== Hugo.workflowMeta.version) {\n        clearCache = true;\n        Hugo.config.set('wfVersion', Hugo.workflowMeta.version);\n    }\n\n    if (clearCache === true) {\n        Hugo.clearCacheSync();\n    }\n};\n\n/**\n * Check if we need to rebuild icons\n * @param {Array.Object} projects\n * @return {Promise}\n */\nconst checkIcons = async (projects: Array<Object>): Promise<void> => {\n    const themePath: string = Hugo.alfredMeta.themeFile;\n    const lastTheme: ?string = Hugo.cache.get('lastTheme');\n\n    try {\n        fs.statSync(path.join(__dirname, 'icons'));\n    } catch (e) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (!lastTheme || lastTheme !== Hugo.alfredMeta.theme) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (themePath) {\n        const themeFile = Hugo.cacheFile(themePath, 'theme');\n\n        themeFile.on('change', () => {\n            Icons.rebuild(projects);\n        });\n\n        themeFile.get();\n    }\n};\n\n/**\n * Projects action\n */\nHugo.action('projects', () => {\n    // Home dir\n    const homedir = process.env.HOME || '';\n\n    // Projects file\n    const projectsFile = Hugo.cacheFile(path.resolve(homedir, '.atom', 'projects.cson'), 'projects');\n\n    // Check environment for changes\n    checkEnvironmentChanges();\n\n    // Parse projects\n    projectsFile.on('change', (cache, file) => {\n        // Read projects file\n        let projects = CSON.parse(file) || [];\n\n        // Parse projects\n        projects = Project.parseAll(projects);\n\n        // Rebuild icons when needed\n        Icons.rebuild(projects, {onlyMissing: true});\n\n        // Sort projects\n        projects.sort((a, b) => {\n            let nameA = a.title.toLowerCase();\n            let nameB = b.title.toLowerCase();\n\n            if (nameA < nameB) {\n                return -1;\n            }\n\n            if (nameA > nameB) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        cache.store(projects);\n    });\n\n    // Add projects to Hugo\n    let projects = projectsFile.get();\n\n    if (projects && Array.isArray(projects)) {\n        // Check dependencies for icon building\n        if (!Icons.checkDependencies() && Icons.usedIcons(projects).length > 0) {\n            console.error(`Missing dependencies to render project icons. Please run: cd ${__dirname} && npm install`);\n\n            Hugo.addItem({\n                title: 'Missing dependencies',\n                subtitle: 'Missing dependencies to render project icons. Please press enter to install.',\n                arg: __dirname,\n                variables: {\n                    task: 'wfDependencies'\n                },\n                valid: true,\n                mods: {\n                    alt: {\n                        valid: true,\n                        subtitle: 'View documentation on this issue.',\n                        arg: 'https://github.com/Cloudstek/alfred-hugo/blob/master/README.md'\n                    }\n                }\n            });\n        }\n\n        // Add projects to Hugo\n        Hugo.addItems(projects);\n\n        // Check icons\n        checkIcons(projects);\n    }\n\n    // Check if any projects found\n    if (Hugo.itemCount === 0) {\n        Hugo.addItem({\n            title: 'No projects found.'\n        });\n    }\n\n    // Output\n    Hugo.feedback();\n});\n"]}