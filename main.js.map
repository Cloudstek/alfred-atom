{"version":3,"sources":["main.js.flow"],"names":["Hugo","require","CSON","path","fs","Project","Icons","checkEnvironmentChanges","clearCache","process","env","terminalApp","config","get","set","workflowMeta","version","clearCacheSync","checkIcons","projects","themePath","alfredMeta","themeFile","lastTheme","statSync","join","__dirname","theme","rebuild","cacheFile","on","onlyMissing","action","homedir","HOME","projectsFile","resolve","configFile","cache","file","parse","parseAll","sort","a","b","nameA","title","toLowerCase","nameB","store","includeGitRepositories","projectHome","core","prettifyTitle","undefined","gitProjects","findGitRepositories","length","filter","existingPaths","forEach","paths","project","subtitle","split","concat","includes","gitProject","Array","isArray","checkDependencies","usedIcons","console","error","addItem","arg","variables","task","valid","mods","alt","addItems","itemCount","feedback"],"mappings":"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","sourcesContent":["// @flow\n\nconst Hugo = require('alfred-hugo');\nconst CSON = require('cson-parser');\nconst path = require('path');\nconst fs = require('fs');\n\nconst Project = require('./project');\nconst Icons = require('./icons');\n\n/**\n * Check for environment changes (workflow version, terminal app, nodejs path)\n */\nconst checkEnvironmentChanges = (): void => {\n    let clearCache = false;\n\n    // Terminal app\n    if (process.env.terminalApp && Hugo.config.get('terminalApp') !== process.env.terminalApp) {\n        clearCache = true;\n        Hugo.config.set('terminalApp', process.env.terminalApp);\n    }\n\n    // Workflow version\n    if (Hugo.workflowMeta.version && Hugo.config.get('wfVersion') !== Hugo.workflowMeta.version) {\n        clearCache = true;\n        Hugo.config.set('wfVersion', Hugo.workflowMeta.version);\n    }\n\n    if (clearCache === true) {\n        Hugo.clearCacheSync();\n    }\n};\n\n/**\n * Check if we need to rebuild icons\n *\n * @param {Array.Object} projects List of Atom project definitions\n */\nconst checkIcons = async (projects: Array<Object>): Promise<void> => {\n    const themePath: string = Hugo.alfredMeta.themeFile;\n    const lastTheme: ?string = Hugo.config.get('lastTheme');\n\n    try {\n        fs.statSync(path.join(__dirname, 'icons'));\n    } catch (e) {\n        Hugo.config.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (!lastTheme || lastTheme !== Hugo.alfredMeta.theme) {\n        Hugo.config.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (themePath) {\n        const themeFile = Hugo.cacheFile(themePath, 'theme');\n\n        themeFile.on('change', () => {\n            Icons.rebuild(projects);\n        });\n\n        themeFile.get();\n    }\n\n    Icons.rebuild(projects, {onlyMissing: true});\n};\n\n/**\n * Projects action\n */\nHugo.action('projects', () => {\n    // Home dir\n    const homedir = process.env.HOME || '';\n\n    // Projects file\n    const projectsFile = Hugo.cacheFile(path.resolve(homedir, '.atom', 'projects.cson'), 'projects');\n    const configFile = Hugo.cacheFile(path.resolve(homedir, '.atom', 'config.cson'), 'config');\n\n    // Check environment for changes\n    checkEnvironmentChanges();\n\n    // Parse projects\n    projectsFile.on('change', (cache, file) => {\n        // Read projects file\n        let projects:Array<Object> = CSON.parse(file) || [];\n\n        // Parse projects\n        projects = Project.parseAll(projects);\n\n        // Rebuild icons when needed\n        Icons.rebuild(projects, {onlyMissing: true});\n\n        // Sort projects\n        projects.sort((a, b) => {\n            let nameA = a.title.toLowerCase();\n            let nameB = b.title.toLowerCase();\n\n            if (nameA < nameB) {\n                return -1;\n            }\n\n            if (nameA > nameB) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        cache.store(projects);\n    });\n\n    // Parse config\n    configFile.on('change', (cache, file) => {\n        // Read config file\n        let config:Object = CSON.parse(file) || {};\n\n        config = config['*'] || {};\n\n        cache.store(config);\n    });\n\n    // Add projects to Hugo\n    let projects = projectsFile.get() || [];\n\n    // Get config\n    let config = ((configFile.get(): any): Object);\n\n    // Fetch all git projects\n    if (config['project-manager'] && config['project-manager'].includeGitRepositories === true) {\n        let projectHome = config.core.projectHome || path.resolve(homedir, 'github');\n        let prettifyTitle = config['project-manager'].prettifyTitle === undefined ? true : config['project-manager'].prettifyTitle;\n\n        // Find git repositories\n        let gitProjects = Project.findGitRepositories(projectHome, prettifyTitle) || [];\n\n        // Don't include existing projects\n        if (projects.length > 0) {\n            gitProjects = gitProjects.filter(gitProject => {\n                let existingPaths = [];\n\n                projects.forEach(project => {\n                    let paths = project.subtitle.split(', ') || [];\n                    existingPaths = existingPaths.concat(paths);\n                });\n\n                return !existingPaths.includes(gitProject.subtitle);\n            });\n        }\n\n        projects = projects.concat(gitProjects);\n    }\n\n    if (projects && Array.isArray(projects)) {\n        // Check dependencies for icon building\n        if (!Icons.checkDependencies() && Icons.usedIcons(projects).length > 0) {\n            console.error(`Missing dependencies to render project icons. Please run: cd ${__dirname} && npm install`);\n\n            Hugo.addItem({\n                title: 'Missing dependencies',\n                subtitle: 'Missing dependencies to render project icons. Please press enter to install.',\n                arg: __dirname,\n                variables: {\n                    task: 'wfDependencies'\n                },\n                valid: true,\n                mods: {\n                    alt: {\n                        valid: true,\n                        subtitle: 'View documentation on this issue.',\n                        arg: 'https://github.com/Cloudstek/alfred-hugo/blob/master/README.md'\n                    }\n                }\n            });\n        }\n\n        // Add projects to Hugo\n        Hugo.addItems(projects);\n\n        // Check icons\n        checkIcons(projects);\n    }\n\n    // Check if any projects found\n    if (Hugo.itemCount === 0) {\n        Hugo.addItem({\n            title: 'No projects found.'\n        });\n    }\n\n    // Output\n    Hugo.feedback();\n});\n"],"file":"main.js"}