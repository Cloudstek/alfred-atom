{"version":3,"sources":["main.js.flow"],"names":["Hugo","require","CSON","path","fs","Project","Icons","checkIcons","projects","themePath","alfredMeta","themeFile","lastTheme","cache","get","statSync","join","__dirname","set","theme","rebuild","cacheFile","on","action","query","length","feedback","homedir","process","env","HOME","projectsFile","resolve","file","parse","parseAll","onlyMissing","sort","a","b","nameA","title","toLowerCase","nameB","store","Array","isArray","addItems","filterItems","trim","itemCount","addItem"],"mappings":"wVAEA,GAAMA,MAAOC,QAAQ,aAAR,CAAb,CACA,GAAMC,MAAOD,QAAQ,aAAR,CAAb,CACA,GAAME,MAAOF,QAAQ,MAAR,CAAb,CACA,GAAMG,IAAKH,QAAQ,IAAR,CAAX,CAEA,GAAMI,SAAUJ,QAAQ,WAAR,CAAhB,CACA,GAAMK,OAAQL,QAAQ,SAAR,CAAd,CAEA,GAAMM,0FAAa,iBAAOC,QAAP,sJACTC,SADS,CACWT,KAAKU,UAAL,CAAgBC,SAD3B,CAETC,SAFS,CAEYZ,KAAKa,KAAL,CAAWC,GAAX,CAAe,WAAf,CAFZ,iBAKXV,GAAGW,QAAH,CAAYZ,KAAKa,IAAL,CAAUC,SAAV,CAAqB,OAArB,CAAZ,EALW,+EAOXjB,KAAKa,KAAL,CAAWK,GAAX,CAAe,WAAf,CAA4BlB,KAAKU,UAAL,CAAgBS,KAA5C,EACAb,MAAMc,OAAN,CAAcZ,QAAd,EARW,8CAYX,CAACI,SAAD,EAAcA,YAAcZ,KAAKU,UAAL,CAAgBS,KAZjC,2BAaXnB,KAAKa,KAAL,CAAWK,GAAX,CAAe,WAAf,CAA4BlB,KAAKU,UAAL,CAAgBS,KAA5C,EACAb,MAAMc,OAAN,CAAcZ,QAAd,EAdW,yCAkBf,GAAIC,SAAJ,CAAe,CACLE,SADK,CACOX,KAAKqB,SAAL,CAAeZ,SAAf,CAA0B,OAA1B,CADP,CAGXE,UAAUW,EAAV,CAAa,QAAb,CAAuB,UAAM,CACzBhB,MAAMc,OAAN,CAAcZ,QAAd,EACH,CAFD,EAIAG,UAAUG,GAAV,GACH,CA1Bc,yEAAb,yEAAN,CA6BAd,KAAKuB,MAAL,CAAY,UAAZ,CAAwB,eAAS,CAC7B,GAAI,CAACC,KAAD,EAAUA,MAAMC,MAAN,GAAiB,CAA/B,CAAkC,CAC9BzB,KAAK0B,QAAL,GACH,CAGD,GAAMC,SAAUC,QAAQC,GAAR,CAAYC,IAAZ,EAAoB,EAApC,CAGA,GAAMC,cAAe/B,KAAKqB,SAAL,CAAelB,KAAK6B,OAAL,CAAaL,OAAb,CAAsB,OAAtB,CAA+B,eAA/B,CAAf,CAAgE,UAAhE,CAArB,CAGAI,aAAaT,EAAb,CAAgB,QAAhB,CAA0B,SAACT,KAAD,CAAQoB,IAAR,CAAiB,CAEvC,GAAIzB,UAAWN,KAAKgC,KAAL,CAAWD,IAAX,GAAoB,EAAnC,CAGAzB,SAAWH,QAAQ8B,QAAR,CAAiB3B,QAAjB,CAAX,CAGAF,MAAMc,OAAN,CAAcZ,QAAd,CAAwB,CAAC4B,YAAa,IAAd,CAAxB,EAGA5B,SAAS6B,IAAT,CAAc,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACpB,GAAIC,OAAQF,EAAEG,KAAF,CAAQC,WAAR,EAAZ,CACA,GAAIC,OAAQJ,EAAEE,KAAF,CAAQC,WAAR,EAAZ,CAEA,GAAIF,MAAQG,KAAZ,CAAmB,CACf,MAAO,CAAC,CAAR,CACH,CAED,GAAIH,MAAQG,KAAZ,CAAmB,CACf,MAAO,EAAP,CACH,CAED,MAAO,EAAP,CACH,CAbD,EAeA9B,MAAM+B,KAAN,CAAYpC,QAAZ,EACH,CA3BD,EA8BA,GAAIA,UAAWuB,aAAajB,GAAb,EAAf,CAEA,GAAIN,UAAYqC,MAAMC,OAAN,CAActC,QAAd,CAAhB,CAAyC,CACrCR,KAAK+C,QAAL,CAAcvC,QAAd,EAGAD,WAAWC,QAAX,EACH,CAGDR,KAAKgD,WAAL,CAAiBxB,MAAMyB,IAAN,EAAjB,EAGA,GAAIjD,KAAKkD,SAAL,CAAiB,CAArB,CAAwB,CACpBlD,KAAKmD,OAAL,CAAa,CACTV,MAAO,oBADE,CAAb,EAGH,CAGDzC,KAAK0B,QAAL,GACH,CA/DD","file":"main.js","sourcesContent":["// @flow\n\nconst Hugo = require('alfred-hugo');\nconst CSON = require('cson-parser');\nconst path = require('path');\nconst fs = require('fs');\n\nconst Project = require('./project');\nconst Icons = require('./icons');\n\nconst checkIcons = async (projects: Array<Object>) => {\n    const themePath: string = Hugo.alfredMeta.themeFile;\n    const lastTheme: ?string = Hugo.cache.get('lastTheme');\n\n    try {\n        fs.statSync(path.join(__dirname, 'icons'));\n    } catch (e) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (!lastTheme || lastTheme !== Hugo.alfredMeta.theme) {\n        Hugo.cache.set('lastTheme', Hugo.alfredMeta.theme);\n        Icons.rebuild(projects);\n        return;\n    }\n\n    if (themePath) {\n        const themeFile = Hugo.cacheFile(themePath, 'theme');\n\n        themeFile.on('change', () => {\n            Icons.rebuild(projects);\n        });\n\n        themeFile.get();\n    }\n};\n\nHugo.action('projects', query => {\n    if (!query || query.length === 0) {\n        Hugo.feedback();\n    }\n\n    // Home dir\n    const homedir = process.env.HOME || '';\n\n    // Projects file\n    const projectsFile = Hugo.cacheFile(path.resolve(homedir, '.atom', 'projects.cson'), 'projects');\n\n    // Parse projects\n    projectsFile.on('change', (cache, file) => {\n        // Read projects file\n        let projects = CSON.parse(file) || [];\n\n        // Parse projects\n        projects = Project.parseAll(projects);\n\n        // Rebuild icons when needed\n        Icons.rebuild(projects, {onlyMissing: true});\n\n        // Sort projects\n        projects.sort((a, b) => {\n            let nameA = a.title.toLowerCase();\n            let nameB = b.title.toLowerCase();\n\n            if (nameA < nameB) {\n                return -1;\n            }\n\n            if (nameA > nameB) {\n                return 1;\n            }\n\n            return 0;\n        });\n\n        cache.store(projects);\n    });\n\n    // Add projects to Hugo\n    let projects = projectsFile.get();\n\n    if (projects && Array.isArray(projects)) {\n        Hugo.addItems(projects);\n\n        // Check icons\n        checkIcons(projects);\n    }\n\n    // Filter items by query\n    Hugo.filterItems(query.trim());\n\n    // Check if any projects found\n    if (Hugo.itemCount < 1) {\n        Hugo.addItem({\n            title: 'No projects found.'\n        });\n    }\n\n    // Output\n    Hugo.feedback();\n});\n"]}