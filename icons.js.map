{"version":3,"sources":["icons.js.flow"],"names":["color","require","CSON","fs","Hugo","path","svgexport","octicons","octiconsPath","join","dirname","resolve","Icons","iconColor","alfredThemeFile","alfredTheme","result","text","e","process","env","alfred_theme_background","bgColor","grayscale","negate","rgb","string","icons","length","homedir","HOME","projectsFile","readFileSync","projects","parse","octiconNames","i","icon","startsWith","indexOf","slice","push","iconSize","iconPath","__dirname","renderQueue","options","_pathColor","input","output","render","err","module","exports"],"mappings":"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","file":"icons.js","sourcesContent":["// @flow\n\nconst color = require('color');\nconst CSON = require('cson-parser');\nconst fs = require('fs');\nconst Hugo = require('alfred-hugo');\nconst path = require('path');\nconst svgexport = require('svgexport');\n\nconst octicons = require('octicons');\nconst octiconsPath = path.join(path.dirname(require.resolve('octicons')), 'build', 'svg');\n\nclass Icons {\n    /**\n     * SVG icon path color\n     * @return {string}\n     */\n    _pathColor(): string {\n        let iconColor = color('#FFFFFF');\n\n        // Decide color based on text or background color\n        if (Hugo.alfredThemeFile) {\n            try {\n                iconColor = color(Hugo.alfredTheme.result.text.color);\n            } catch (e) {}\n        } else if (process.env.alfred_theme_background) {\n            let bgColor = color(process.env.alfred_theme_background);\n            iconColor = bgColor.grayscale().negate();\n        }\n\n        return iconColor.rgb().string();\n    }\n\n    /**\n     * Rebuild icon(s)\n     * @param {string|Array.string} icons Icon name(s) to rebuild\n     * @return {Promise}\n     * @async\n     */\n    async rebuild(icons: ?Array<string>) {\n        // Icons\n        icons = icons || [];\n\n        // Read projects file\n        if (icons.length === 0) {\n            const homedir = process.env.HOME || '';\n            const projectsFile = fs.readFileSync(path.join(homedir, '.atom', 'projects.cson'));\n\n            let projects = CSON.parse(projectsFile) || [];\n            let octiconNames = Object.keys(octicons);\n\n            for (let i = 0; i < projects.length; i++) {\n                let icon = projects[i].icon;\n                if (icon && icon.startsWith('icon-') && octiconNames.indexOf(icon.slice(5)) >= 0) {\n                    icons.push(icon.slice(5));\n                }\n            }\n        }\n\n        // Icon size\n        let iconSize = 64;\n\n        if (Hugo.alfredThemeFile) {\n            try {\n                iconSize = Hugo.alfredTheme.result.iconSize;\n            } catch (e) {}\n        }\n\n        // Output path\n        let iconPath = path.join(__dirname, 'icons');\n\n        // Render queue\n        let renderQueue = [];\n\n        // Render options\n        let options = [iconSize + ':' + iconSize, 'pad', 'path{fill:' + this._pathColor() + '}'];\n\n        // Build render queue\n        for (let i = 0; i < icons.length; i++) {\n            let icon = icons[i];\n\n            if (icon && icon.length > 0) {\n                renderQueue.push({\n                    input: path.join(octiconsPath, icon + '.svg'),\n                    output: [\n                        [path.join(iconPath, icon + '.png'), ...options]\n                    ]\n                });\n            }\n        }\n\n        // Render\n        svgexport.render(renderQueue, err => {\n            if (err) {\n                throw err;\n            }\n        });\n    }\n}\n\nmodule.exports = new Icons();\n"]}