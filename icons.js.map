{"version":3,"sources":["icons.js.flow"],"names":["color","require","fs","Hugo","path","svgexport","octicons","octiconsPath","join","dirname","resolve","Icons","iconColor","alfredThemeFile","alfredTheme","result","text","e","process","env","alfred_theme_background","bgColor","grayscale","negate","rgb","string","projects","options","iconPath","__dirname","octiconNames","icons","iconSize","renderQueue","i","length","hasOwnProperty","icon","parse","dir","indexOf","name","push","onlyMissing","filter","statSync","renderOptions","_pathColor","input","output","render","err","module","exports"],"mappings":"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","file":"icons.js","sourcesContent":["// @flow\n\nconst color = require('color');\nconst fs = require('fs');\nconst Hugo = require('alfred-hugo');\nconst path = require('path');\nconst svgexport = require('svgexport');\n\nconst octicons = require('octicons');\nconst octiconsPath = path.join(path.dirname(require.resolve('octicons')), 'build', 'svg');\n\nclass Icons {\n    /**\n     * SVG icon path color\n     * @return {string}\n     */\n    _pathColor(): string {\n        let iconColor = color('#FFFFFF');\n\n        // Decide color based on text or background color\n        if (Hugo.alfredThemeFile) {\n            try {\n                iconColor = color(Hugo.alfredTheme.result.text.color);\n            } catch (e) {}\n        } else if (process.env.alfred_theme_background) {\n            let bgColor = color(process.env.alfred_theme_background);\n            iconColor = bgColor.grayscale().negate();\n        }\n\n        return iconColor.rgb().string();\n    }\n\n    /**\n     * Rebuild icon(s)\n     * @param {Array.Object} projects\n     * @param {Object} options\n     * @return {Promise}\n     * @async\n     */\n    async rebuild(projects: Array<Object>, options: Object = {}) {\n        // Output path\n        const iconPath = path.join(__dirname, 'icons');\n\n        // Octicon names\n        const octiconNames = Object.keys(octicons);\n\n        // Icons to render\n        let icons = [];\n\n        // Icon size\n        let iconSize = 64;\n\n        // Render queue\n        let renderQueue = [];\n\n        // Get used icons from projects list\n        for (let i = 0; i < projects.length; i++) {\n            if (!projects[i].hasOwnProperty('icon')) {\n                continue;\n            }\n\n            let icon = path.parse(projects[i].icon.path);\n\n            if (icon.dir === iconPath && octiconNames.indexOf(icon.name) >= 0) {\n                if (icons.indexOf(icon.name) === -1) {\n                    icons.push(icon.name);\n                }\n            }\n        }\n\n        // Filter icons\n        if (options && options.onlyMissing === true) {\n            icons = icons.filter(icon => {\n                try {\n                    fs.statSync(path.join(iconPath, icon + '.png'));\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            });\n        }\n\n        if (icons.length === 0) {\n            return;\n        }\n\n        if (Hugo.alfredThemeFile) {\n            try {\n                iconSize = Hugo.alfredTheme.result.iconSize;\n            } catch (e) {}\n        }\n\n        // Render options\n        let renderOptions = [iconSize + ':' + iconSize, 'pad', 'path{fill:' + this._pathColor() + '}'];\n\n        // Build render queue\n        for (let i = 0; i < icons.length; i++) {\n            let icon = icons[i];\n\n            if (icon && icon.length > 0) {\n                renderQueue.push({\n                    input: path.join(octiconsPath, icon + '.svg'),\n                    output: [\n                        [path.join(iconPath, icon + '.png'), ...renderOptions]\n                    ]\n                });\n            }\n        }\n\n        // Render\n        svgexport.render(renderQueue, err => {\n            if (err) {\n                throw err;\n            }\n        });\n    }\n}\n\nmodule.exports = new Icons();\n"]}