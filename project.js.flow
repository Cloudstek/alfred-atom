// @flow

const fs = require('fs');
const octicons = require('octicons');
const path = require('path');

const atomAppName = process.env.atomAppName || 'Atom';

/**
 * Atom Project
 * @class
 */
class Project {
    /**
     * Check if file exists
     * @param {string} path
     * @return {boolean}
     */
    _fileExists(path: string): boolean {
        try {
            fs.statSync(path);
            return true;
        } catch (err) {
            return false;
        }
    }

    /**
     * Project UID
     * @param {Object} project
     * @return {string}
     */
    _uid(project: Object): string {
        return project.title.toLowerCase().replace(' ', '_');
    }

    /**
     * Project title
     * @param {Object} project
     * @return {string}
     */
    _title(project: Object): string {
        let title:string = project.title;

        if (project.group) {
            title += ' - ' + project.group;
        }

        return title;
    }

    /**
     * Project sub-title
     * @param {Object} project
     * @return {string}
     */
    _subtitle(project: Object): string {
        if (project.paths) {
            return project.paths.join(', ');
        }

        return '';
    }

    /**
     * Project icon
     * @param {Object} project
     * @return {string} Full path to icon
     */
    _icon(project: Object) {
        let iconPaths = [];

        if (project.icon) {
            // Octicon
            if (project.icon.startsWith('icon-')) {
                let octiconNames = Object.keys(octicons);
                if (octiconNames.indexOf(project.icon.slice(5)) >= 0) {
                    return path.join(__dirname, 'icons', project.icon.slice(5) + '.png');
                }
            }

            // Replace tilde
            if (project.icon.startsWith('~/')) {
                let homedir = process.env.HOME || '';
                project.icon = path.resolve(homedir, project.icon.slice(2));
            }

            // Search for project icon if its path is relative
            if (!path.isAbsolute(project.icon)) {
                for (let i = 0; i < project.paths.length; i++) {
                    iconPaths.push(path.resolve(project.paths[i], project.icon));
                }
            }

            // Absolute path
            if (this._fileExists(project.icon)) {
                return project.icon;
            }
        }

        // Search every project root dir for icon.png
        for (let i = 0; i < project.paths.length; i++) {
            iconPaths.push(path.join(project.paths[i], 'icon.png'));
        }

        // Find project icon
        for (let i = 0; i < iconPaths.length; i++) {
            if (this._fileExists(iconPaths[i])) {
                return iconPaths[i];
            }
        }

        return 'icon.png';
    }

    /**
     * Open arguments
     * @param {Object} project
     * @param {string} app Application name
     * @param {Array.string} args Application arguments
     * @return {string}
     */
    _openArgument(project: Object, app: string, args: Array<string> = []): string {
        // Build shell command
        let command = [
            'open',
            '-na',
            `"${app}"`
        ];

        // Append project path(s)
        if (project.paths) {
            command.push('"' + project.paths.join('" "') + '"');
        }

        // Append arguments
        if (args.length > 0) {
            command.push('--args');
            command = command.concat(args);
        }

        return command.join(' ');
    }

    /**
     * Parse project
     * @param {Object} project
     * @return {Object}
     */
    parse(project: Object): Object {
        let item = {
            uid: new Buffer(this._title(project) + this._subtitle(project)).toString('base64'),
            title: this._title(project),
            subtitle: this._subtitle(project),
            icon: {
                path: this._icon(project)
            },
            arg: this._openArgument(project, atomAppName),
            valid: project.paths && project.paths.length > 0,
            mods: {
                alt: {
                    valid: true,
                    subtitle: 'Open project path(s) in terminal',
                    arg: this._openArgument(project, process.env.terminalApp || 'Terminal')
                },
                cmd: {
                    valid: true,
                    subtitle: 'Open in new window',
                    arg: this._openArgument(project, atomAppName, ['-n'])
                },
                ctrl: {
                    valid: true,
                    subtitle: 'Open in development mode',
                    arg: this._openArgument(project, atomAppName, ['-d'])
                },
                fn: {
                    valid: true,
                    subtitle: 'Append project path(s) to last open window',
                    arg: this._openArgument(project, atomAppName, ['-a'])
                },
                shift: {
                    valid: true,
                    subtitle: 'Open project path(s) in finder',
                    arg: this._openArgument(project, 'Finder')
                }
            }
        };

        return item;
    }

    /**
     * Parse a list of projects
     * @param {Array.Object} projects
     * @return {Array.Object}
     */
    parseAll(projects: Array<Object>): Array<Object> {
        let result = [];

        for (let i = 0; i < projects.length; i++) {
            result[result.length] = this.parse(projects[i]);
        }

        return result;
    }
}

module.exports = new Project();
