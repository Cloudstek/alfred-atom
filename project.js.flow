// @flow

const fs = require('fs');
const octicons = require('octicons');
const path = require('path');
const glob = require('glob');
const changeCase = require('change-case');

const atomApp = process.env.atomApp || 'Atom';
const terminalApp = process.env.terminalApp || 'Terminal';

class Project {
    /**
     * Check if file exists
     *
     * @param {string} path File path
     *
     * @return {boolean} True if file exists
     */
    _fileExists(path: string): boolean {
        try {
            fs.statSync(path);
            return true;
        } catch (err) {
            return false;
        }
    }

    /**
     * Project UID
     *
     * @param {Object} project Atom project definition
     *
     * @return {string} Unique Alfred item ID used for caching
     */
    _uid(project: Object): string {
        return project.title.toLowerCase().replace(' ', '_');
    }

    /**
     * Project title
     *
     * @param {Object} project Atom project definition
     *
     * @return {string} Title
     */
    _title(project: Object): string {
        let title:string = project.title;

        if (project.group) {
            title += ' - ' + project.group;
        }

        return title;
    }

    /**
     * Project sub-title
     *
     * @param {Object} project Atom project definition
     *
     * @return {string} Sub-title
     */
    _subtitle(project: Object): string {
        if (project.paths) {
            return project.paths.join(', ');
        }

        return '';
    }

    /**
     * Project icon
     *
     * @param {Object} project Atom project definition
     *
     * @return {string} Full path to icon
     */
    _icon(project: Object) {
        let iconPaths = [];

        if (project.icon) {
            // Octicon
            if (project.icon.startsWith('icon-')) {
                let octiconNames = Object.keys(octicons);
                if (octiconNames.indexOf(project.icon.slice(5)) >= 0) {
                    return path.join(__dirname, 'icons', project.icon.slice(5) + '.png');
                }
            }

            // Replace tilde
            if (project.icon.startsWith('~/')) {
                let homedir = process.env.HOME || '';
                project.icon = path.resolve(homedir, project.icon.slice(2));
            }

            // Search for project icon if its path is relative
            if (!path.isAbsolute(project.icon)) {
                for (let i = 0; i < project.paths.length; i++) {
                    iconPaths.push(path.resolve(project.paths[i], project.icon));
                }
            }

            // Absolute path
            if (this._fileExists(project.icon)) {
                return project.icon;
            }
        }

        // Search every project root dir for icon.png
        for (let i = 0; i < project.paths.length; i++) {
            iconPaths.push(path.join(project.paths[i], 'icon.png'));
        }

        // Find project icon
        for (let i = 0; i < iconPaths.length; i++) {
            if (this._fileExists(iconPaths[i])) {
                return iconPaths[i];
            }
        }

        return 'icon.png';
    }

    /**
     * Open arguments
     *
     * @param {Object} project Atom project definition
     * @param {string} app Application name
     * @param {Array.string} args Application arguments
     *
     * @return {string} Open command
     */
    _openArgument(project: Object, app: string, args: Array<string> = []): string {
        // Build shell command
        let command = [
            'open',
            '-na',
            `"${app}"`
        ];

        // Append project path(s)
        if (project.paths) {
            command.push('"' + project.paths.join('" "') + '"');
        }

        // Append arguments
        if (args.length > 0) {
            command.push('--args');
            command = command.concat(args);
        }

        return command.join(' ');
    }

    /**
     * Parse project
     *
     * @param {Object} project Atom project definition
     *
     * @return {Object} Alfred item
     */
    parse(project: Object): ?Object {
        if (!project.paths) {
            console.warn('Skipping project missing paths, possibly a template.');
            return null;
        }

        let item = {
            uid: Buffer.from(this._title(project) + this._subtitle(project), 'utf8').toString('base64'),
            title: this._title(project),
            subtitle: this._subtitle(project),
            icon: {
                path: this._icon(project)
            },
            arg: this._openArgument(project, atomApp),
            valid: project.paths && project.paths.length > 0,
            mods: {
                alt: {
                    valid: true,
                    subtitle: 'Open project path(s) in terminal',
                    arg: this._openArgument(project, terminalApp)
                },
                cmd: {
                    valid: true,
                    subtitle: 'Open in new window',
                    arg: this._openArgument(project, atomApp, ['-n'])
                },
                ctrl: {
                    valid: true,
                    subtitle: 'Open in development mode',
                    arg: this._openArgument(project, atomApp, ['-d'])
                },
                fn: {
                    valid: true,
                    subtitle: 'Append project path(s) to last open window',
                    arg: this._openArgument(project, atomApp, ['-a'])
                },
                shift: {
                    valid: true,
                    subtitle: 'Open project path(s) in finder',
                    arg: this._openArgument(project, 'Finder')
                }
            }
        };

        return item;
    }

    /**
     * Parse a list of projects
     *
     * @param {Array.Object} projects List of Atom project definitions
     *
     * @return {Array.Object} Alfred items
     */
    parseAll(projects: Array<Object>): Array<Object> {
        let result = [];

        for (let i = 0; i < projects.length; i++) {
            let project = this.parse(projects[i]);

            if (project !== null && project !== undefined) {
                result.push(project);
            }
        }

        return result;
    }

    /**
     * Find git repositories and turn it into a list of results
     *
     * @param {string} projectHome Directory to search for git repositories
     * @param {boolean} prettifyTitle Prettify title
     *
     * @return {Array.Object} Alfred items
     */
    findGitRepositories(projectHome: string, prettifyTitle: boolean = true): Array<Object> {
        let projects = [];

        let dirs:Array<string> = glob.sync('*/.git', {
            cwd: projectHome
        });

        dirs.forEach(dir => {
            dir = dir.substring(0, dir.indexOf('/.git'));

            let project = {
                title: prettifyTitle ? changeCase.title(dir) : dir,
                group: 'Git repository',
                paths: [
                    path.resolve(projectHome, dir)
                ]
            };

            projects.push(project);
        });

        return this.parseAll(projects);
    }
}

module.exports = new Project();
