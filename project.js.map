{"version":3,"sources":["project.js.flow"],"names":["fs","require","octicons","path","Project","statSync","err","project","title","toLowerCase","replace","group","paths","join","iconPaths","icon","startsWith","octiconNames","indexOf","slice","__dirname","homedir","process","env","HOME","resolve","isAbsolute","i","length","push","_fileExists","options","atomPath","command","concat","app","item","_title","subtitle","_subtitle","_icon","arg","_atomArgument","valid","mods","alt","_openArgument","terminalApp","cmd","ctrl","fn","shift","projects","result","parse","module","exports"],"mappings":"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","file":"project.js","sourcesContent":["// @flow\n\nconst fs = require('fs');\nconst octicons = require('octicons');\nconst path = require('path');\n\n/**\n * Atom Project\n * @class\n */\nclass Project {\n    /**\n     * Check if file exists\n     * @param {string} path\n     * @return {boolean}\n     */\n    _fileExists(path: string): boolean {\n        try {\n            fs.statSync(path);\n            return true;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Project UID\n     * @param {Object} project\n     * @return {string}\n     */\n    _uid(project: Object): string {\n        return project.title.toLowerCase().replace(' ', '_');\n    }\n\n    /**\n     * Project title\n     * @param {Object} project\n     * @return {string}\n     */\n    _title(project: Object): string {\n        let title:string = project.title;\n\n        if (project.group) {\n            title += ' - ' + project.group;\n        }\n\n        return title;\n    }\n\n    /**\n     * Project sub-title\n     * @param {Object} project\n     * @return {string}\n     */\n    _subtitle(project: Object): string {\n        if (project.paths) {\n            return project.paths.join(', ');\n        }\n\n        return '';\n    }\n\n    /**\n     * Project icon\n     * @param {Object} project\n     * @return {string} Full path to icon\n     */\n    _icon(project: Object) {\n        let iconPaths = [];\n\n        if (project.icon) {\n            // Octicon\n            if (project.icon.startsWith('icon-')) {\n                let octiconNames = Object.keys(octicons);\n                if (octiconNames.indexOf(project.icon.slice(5)) >= 0) {\n                    return path.join(__dirname, 'icons', project.icon.slice(5) + '.png');\n                }\n            }\n\n            // Replace tilde\n            if (project.icon.startsWith('~/')) {\n                let homedir = process.env.HOME || '';\n                project.icon = path.resolve(homedir, project.icon.slice(2));\n            }\n\n            // Search for project icon if its path is relative\n            if (!path.isAbsolute(project.icon)) {\n                for (let i = 0; i < project.paths.length; i++) {\n                    iconPaths.push(path.resolve(project.paths[i], project.icon));\n                }\n            }\n\n            // Absolute path\n            if (this._fileExists(project.icon)) {\n                return project.icon;\n            }\n        }\n\n        // Search every project root dir for icon.png\n        for (let i = 0; i < project.paths.length; i++) {\n            iconPaths.push(path.join(project.paths[i], 'icon.png'));\n        }\n\n        // Find project icon\n        for (let i = 0; i < iconPaths.length; i++) {\n            if (this._fileExists(iconPaths[i])) {\n                return iconPaths[i];\n            }\n        }\n\n        return 'icon.png';\n    }\n\n    /**\n     * Alfred item arguments\n     * @param {Object} project\n     * @return {string}\n     */\n    _atomArgument(project: Object, options: Array<string> = []): string {\n        let atomPath = process.env.atomPath || '/usr/local/bin/atom';\n\n        // Build shell command\n        let command = [\n            atomPath\n        ];\n\n        // Append Atom options\n        command = command.concat(options);\n\n        // Append project path(s)\n        if (project.paths) {\n            command.push('\"' + project.paths.join('\" \"') + '\"');\n        }\n\n        return command.join(' ');\n    }\n\n    _openArgument(project: Object, app: string): string {\n        // Build shell command\n        let command = [\n            'open',\n            '-a',\n            `\"${app}\"`\n        ];\n\n        // Append project path(s)\n        if (project.paths) {\n            command.push('\"' + project.paths.join('\" \"') + '\"');\n        }\n\n        return command.join(' ');\n    }\n\n    /**\n     * Parse project\n     * @param {Object} project\n     * @return {Object}\n     */\n    parse(project: Object): Object {\n        let item = {\n            title: this._title(project),\n            subtitle: this._subtitle(project),\n            icon: {\n                path: this._icon(project)\n            },\n            arg: this._atomArgument(project),\n            valid: project.paths && project.paths.length > 0,\n            mods: {\n                alt: {\n                    valid: true,\n                    subtitle: 'Open project path(s) in terminal',\n                    arg: this._openArgument(project, process.env.terminalApp || 'Terminal')\n                },\n                cmd: {\n                    valid: true,\n                    subtitle: 'Open in new window',\n                    arg: this._atomArgument(project, ['-n'])\n                },\n                ctrl: {\n                    valid: true,\n                    subtitle: 'Open in development mode',\n                    arg: this._atomArgument(project, ['-d'])\n                },\n                fn: {\n                    valid: true,\n                    subtitle: 'Append project path(s) to last open window',\n                    arg: this._atomArgument(project, ['-a'])\n                },\n                shift: {\n                    valid: true,\n                    subtitle: 'Open project path(s) in finder',\n                    arg: this._openArgument(project, 'Finder')\n                }\n            }\n        };\n\n        return item;\n    }\n\n    /**\n     * Parse a list of projects\n     * @param {Array.Object} projects\n     * @return {Array.Object}\n     */\n    parseAll(projects: Array<Object>): Array<Object> {\n        let result = [];\n\n        for (let i = 0; i < projects.length; i++) {\n            result.push(this.parse(projects[i]));\n        }\n\n        return result;\n    }\n}\n\nmodule.exports = new Project();\n"]}