{"version":3,"sources":["project.js.flow"],"names":["fs","require","octicons","path","atomAppName","process","env","Project","statSync","err","project","title","toLowerCase","replace","group","paths","join","iconPaths","icon","startsWith","octiconNames","indexOf","slice","__dirname","homedir","HOME","resolve","isAbsolute","i","length","push","_fileExists","app","args","command","concat","item","uid","Buffer","_title","_subtitle","toString","subtitle","_icon","arg","_openArgument","valid","mods","alt","terminalApp","cmd","ctrl","fn","shift","projects","result","parse","module","exports"],"mappings":"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","file":"project.js","sourcesContent":["// @flow\n\nconst fs = require('fs');\nconst octicons = require('octicons');\nconst path = require('path');\n\nconst atomAppName = process.env.atomAppName || 'Atom';\n\n/**\n * Atom Project\n * @class\n */\nclass Project {\n    /**\n     * Check if file exists\n     * @param {string} path\n     * @return {boolean}\n     */\n    _fileExists(path: string): boolean {\n        try {\n            fs.statSync(path);\n            return true;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Project UID\n     * @param {Object} project\n     * @return {string}\n     */\n    _uid(project: Object): string {\n        return project.title.toLowerCase().replace(' ', '_');\n    }\n\n    /**\n     * Project title\n     * @param {Object} project\n     * @return {string}\n     */\n    _title(project: Object): string {\n        let title:string = project.title;\n\n        if (project.group) {\n            title += ' - ' + project.group;\n        }\n\n        return title;\n    }\n\n    /**\n     * Project sub-title\n     * @param {Object} project\n     * @return {string}\n     */\n    _subtitle(project: Object): string {\n        if (project.paths) {\n            return project.paths.join(', ');\n        }\n\n        return '';\n    }\n\n    /**\n     * Project icon\n     * @param {Object} project\n     * @return {string} Full path to icon\n     */\n    _icon(project: Object) {\n        let iconPaths = [];\n\n        if (project.icon) {\n            // Octicon\n            if (project.icon.startsWith('icon-')) {\n                let octiconNames = Object.keys(octicons);\n                if (octiconNames.indexOf(project.icon.slice(5)) >= 0) {\n                    return path.join(__dirname, 'icons', project.icon.slice(5) + '.png');\n                }\n            }\n\n            // Replace tilde\n            if (project.icon.startsWith('~/')) {\n                let homedir = process.env.HOME || '';\n                project.icon = path.resolve(homedir, project.icon.slice(2));\n            }\n\n            // Search for project icon if its path is relative\n            if (!path.isAbsolute(project.icon)) {\n                for (let i = 0; i < project.paths.length; i++) {\n                    iconPaths.push(path.resolve(project.paths[i], project.icon));\n                }\n            }\n\n            // Absolute path\n            if (this._fileExists(project.icon)) {\n                return project.icon;\n            }\n        }\n\n        // Search every project root dir for icon.png\n        for (let i = 0; i < project.paths.length; i++) {\n            iconPaths.push(path.join(project.paths[i], 'icon.png'));\n        }\n\n        // Find project icon\n        for (let i = 0; i < iconPaths.length; i++) {\n            if (this._fileExists(iconPaths[i])) {\n                return iconPaths[i];\n            }\n        }\n\n        return 'icon.png';\n    }\n\n    /**\n     * Open arguments\n     * @param {Object} project\n     * @param {string} app Application name\n     * @param {Array.string} args Application arguments\n     * @return {string}\n     */\n    _openArgument(project: Object, app: string, args: Array<string> = []): string {\n        // Build shell command\n        let command = [\n            'open',\n            '-na',\n            `\"${app}\"`\n        ];\n\n        // Append project path(s)\n        if (project.paths) {\n            command.push('\"' + project.paths.join('\" \"') + '\"');\n        }\n\n        // Append arguments\n        if (args.length > 0) {\n            command.push('--args');\n            command = command.concat(args);\n        }\n\n        return command.join(' ');\n    }\n\n    /**\n     * Parse project\n     * @param {Object} project\n     * @return {Object}\n     */\n    parse(project: Object): Object {\n        let item = {\n            uid: new Buffer(this._title(project) + this._subtitle(project)).toString('base64'),\n            title: this._title(project),\n            subtitle: this._subtitle(project),\n            icon: {\n                path: this._icon(project)\n            },\n            arg: this._openArgument(project, atomAppName),\n            valid: project.paths && project.paths.length > 0,\n            mods: {\n                alt: {\n                    valid: true,\n                    subtitle: 'Open project path(s) in terminal',\n                    arg: this._openArgument(project, process.env.terminalApp || 'Terminal')\n                },\n                cmd: {\n                    valid: true,\n                    subtitle: 'Open in new window',\n                    arg: this._openArgument(project, atomAppName, ['-n'])\n                },\n                ctrl: {\n                    valid: true,\n                    subtitle: 'Open in development mode',\n                    arg: this._openArgument(project, atomAppName, ['-d'])\n                },\n                fn: {\n                    valid: true,\n                    subtitle: 'Append project path(s) to last open window',\n                    arg: this._openArgument(project, atomAppName, ['-a'])\n                },\n                shift: {\n                    valid: true,\n                    subtitle: 'Open project path(s) in finder',\n                    arg: this._openArgument(project, 'Finder')\n                }\n            }\n        };\n\n        return item;\n    }\n\n    /**\n     * Parse a list of projects\n     * @param {Array.Object} projects\n     * @return {Array.Object}\n     */\n    parseAll(projects: Array<Object>): Array<Object> {\n        let result = [];\n\n        for (let i = 0; i < projects.length; i++) {\n            result[result.length] = this.parse(projects[i]);\n        }\n\n        return result;\n    }\n}\n\nmodule.exports = new Project();\n"]}